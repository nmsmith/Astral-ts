/* generic styles */

.matchParentSize {
    // Note: don't use this in any parent with padding/multiple siblings
    width: 100%;
    height: 100%;
}

$standard-font-size: 16px;

body, button, menu {
    /* The font should be inherited by ALL elements (according to CSS reset),
     * however, most browsers ignore font inheritance for things like buttons.
     */
    font-family: Helvetica, Arial, sans-serif;
    font-size: $standard-font-size;
}

h1 {
    font-size: 24px;
    font-weight: bold;
    padding-bottom: 12px;
}

.row {
    display: flex;
    flex-direction: row;
}

.col {
    display: flex;
    flex-direction: column;
}

.grow {
    flex-grow: 1;
}

.noSelect {
    -webkit-touch-callout: none; /* iOS Safari */
      -webkit-user-select: none; /* Safari */
       -khtml-user-select: none; /* Konqueror HTML */
         -moz-user-select: none; /* Old versions of Firefox */
          -ms-user-select: none; /* Internet Explorer/Edge */
              user-select: none; /* Non-prefixed version, currently
                                    supported by Chrome, Opera and Firefox */
 }

 .hiddenButAccessible {
    position: absolute !important;
    height: 1px;
    width: 1px;
    overflow: hidden;
    clip: rect(1px,1px,1px,1px);
  }

/* component-specific styles */

.view {
    @extend .matchParentSize;
    @extend .col;
    background-color: #ffffff;
}

$main-pad: 10px;

.toolbar {
    @extend .row;
    height: 30px;
    padding: $main-pad;
}

$standard-border-color: #aaaaaa;

.separator {
    border-bottom-style: solid;
    border-width: 1px;
    border-color: $standard-border-color;
}

.ruleView {
    @extend .col;
// create a stacking context so can we render insertion points
// behind rule cards but in front of the page background
    position: relative;
    z-index: 0;
}

.insertionPoint {
    transition: background-color 0.1s;
}

.insertionPoint:hover {
    background-color: #ffefbc;
    //height: $standard-font-size + 8px;
}

.ruleInsertionPoint {
    @extend .insertionPoint;
    height: 20px;
// create a stacking context so can we render behind rule cards
    position: relative;
    z-index: -1;
}

.linkInsertionPoint {
    @extend .insertionPoint;
    height: 20px;
}

$box-shadow-color: #979797;
$standard-box-shadow: 1px 1px 3px 2px $box-shadow-color;

.rule {
    margin-left: $main-pad;
    margin-right: $main-pad;
    box-shadow: $standard-box-shadow;
    align-self: flex-start;
}

.ruleLabel {
    padding-left: 8px;
    padding-right: 8px;
    padding-top: 6px;
    padding-bottom: 6px;
    border-bottom-style: solid;
    border-width: 1px;
    border-color: $standard-border-color;
}

.ruleContent {
    @extend .col;
    padding-left: 8px;
    padding-right: 8px;
}

.ruleBody {
    @extend .col;
    padding-left: 16px;
}

.link {
    @extend .row;
    padding-top: 8px;
}

.linkSpacer {
    width: 8px;
}

.relation {
    color: rgb(153, 0, 255);
}

.smallYSpacer {
    height: 4px;
}

.greyedText {
    color: #666666;
}

.zeroSize {
    width: 0;
    height: 0;
    overflow: visible;
}

.searchBox {
    @extend .col;
}

.searchResultsLocation {
// create a stacking context so we can render in front of rule cards
    position: relative;
    z-index: 1;
}

.searchResults {
    position: absolute; // relative to parent stacking context
    box-shadow: $standard-box-shadow;
}

.searchResult {
    @extend .row;
    padding: 4px;
    background-color: #e5e5e5;
}

.highlighted {
    background-color: #ffff76;
}

.smallXSpacer {
    width: 8px;
}

.deleteButton {
    @extend .noSelect;
    color: red;
}

// .inputForSearchBox {
//     font: inherit; // Important: needs to match the font of the overlaid label
//     width: 1000px; // Long enough to cover all use-cases
//     padding: 0px;
//     margin-top: -2px;
//     border-style: none;
//     color: #00000000;
//     caret-color: #000000ff;
// }
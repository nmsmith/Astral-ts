.searchBox {
    @extend .col;
}

.textBoxInputContext {
    @extend .col;
// create a stacking context for the input element to sit in
    position: relative;
    z-index: 0;
}

$text-box-vertical-padding: 2px;

.textBoxInputPadding {
    padding-left: 3px;
    padding-right: 3px;
    padding-top: $text-box-vertical-padding;
    padding-bottom: $text-box-vertical-padding;
}

$text-box-min-width: 16px;

.textBoxInput {
    @extend .textBoxInputPadding;
    min-width: $text-box-min-width;
    // match the width of my sibling, but don't consume space myself
    position: absolute;
    z-index: 1; // sit on top of the size measure span so interaction still works
    width: calc(100% + 2px); // requires the 2px to not scroll & to show cursor in Chrome
    box-sizing: border-box;
    border-style: none;
    background-color: #00000000; // need to hide background so doesn't stomp on span border
}

.outlined {
    outline-style: solid;
    outline-width: 1px;
    outline-color: $standard-border-color;
}

.textBoxBorder + .textBoxTextSizeMeasure {
    @extend .outlined;
}

.textBoxBorderOnHover:hover + .textBoxTextSizeMeasure {
    @extend .outlined;
}

.searchResultsLocation {
// create a stacking context so we can render in front of rule cards
    position: relative;
    z-index: 1;
}

.searchResults {
    position: absolute; // relative to parent stacking context
    box-shadow: $standard-box-shadow;
}

.searchResult {
    @extend .row;
    @extend .noSelect;
    padding: 4px;
    background-color: #e5e5e5;
}

.highlighted {
    background-color: #ffff76;
}

.deleteButton {
    color: red;
}

// IMPORTANT: Needs to be listed after other CSS styles so that we can override
// colours that may be applied etc. to ensure this element is invisible.
.textBoxTextSizeMeasure {
    @extend .textBoxInputPadding;
    // This padding is a close APPROXIMATION of the auto-magic padding
    // that browsers give to input elements
    padding-bottom: calc(#{$text-box-vertical-padding} + 0.15em);
    min-width: $text-box-min-width;
    white-space: pre;
    color: #00000000;
// put the span underneath the input element so that we can still interact
    position: relative;
    z-index: 0;
}
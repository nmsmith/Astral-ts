//- Main view
div.matchParentSize.col
    form(autocomplete="false")
    div.toolbar
        button(@click = "resetState") Reset state
    div.database.col
        div.insertHere(@click = "newRule(0)")
        template(v-for = "(_, index) in dbEntryCount")
            div.row(:key="rules[index].id")
                div.col
                    input(autocomplete = "nope", v-focus)
                    // TODO: Have to make this input field a component in order
                    // to give each instance its own derived state (search results).
                    // But then I will have to pass the STATE of the component
                    // via a prop (to maintain a central store).
                    // Note: Vuex is obsolete since mutations have to occur through
                    // special mutation functions (for the purposes of logging).
                    // In ES6 this is done automatically via the Proxy API.

                    // Alternately, the Vue 3.0 "composition syntax" will let
                    // me instantiate new computed() state at runtime!
                    // I REALLY CAN'T WAIT FOR VUE 3!

                    //template(v-for = "(text, index) in rules[index].searchMatchText")
                    //    div.suggestionBox(:class="{highlighted: index === constantInputState.selection}").
                    //        {{ text }}
                p if
                input(autocomplete = "nope")
            div.insertHere(@click = "newRule(index+1)")

        br
        p Create a new constant:
        div.searchBox.row(@click = "focusConstantInput")
            div.zeroSize
                input.inputForSearchBox(
                    autocomplete = "nope"
                    ref = "constantInput"
                    v-model = "constantInputState.text"
                    @keydown.enter = "constantCreated"
                    @keydown.prevent.up = "selectPrevious"
                    @keydown.prevent.down = "selectNext"
                )
            p {{ constantInputState.text }}
            //p.greyedText {{ autocompleteText }}
            // Leave a space char to ensure the box has the same height when empty
            p.noSelect &nbsp;
        template(v-for = "(text, index) in textForSearchMatches")
            div.suggestionBox(:class="{highlighted: index === constantInputState.selection}").
                {{ text }}